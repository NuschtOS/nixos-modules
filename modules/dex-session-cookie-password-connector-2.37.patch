From d2fb6cdf8188e6973721ddac657a7c5d3daf6955 Mon Sep 17 00:00:00 2001
From: Julian Taylor <juliantaylor108@gmail.com>
Date: Sat, 18 Apr 2020 20:04:35 +0200
Subject: [PATCH] Add session cookie to password connector login

For the password connector store the identity and the approved scopes in
a cookie per clientid.
Configured via environment variables:

DEX_SESSION_MAXAGE_SECONDS: maximum age of the session
DEX_SESSION_AUTHKEY: 32 byte session authentication key
DEX_SESSION_ENCKEY: 32 byte session encryption key
---
 go.mod             |   2 +
 go.sum             |   5 +++
 server/handlers.go | 102 +++++++++++++++++++++++++++++++++++++++++----
 server/server.go   |  28 ++++++++++++-
 4 files changed, 128 insertions(+), 9 deletions(-)

diff --git a/go.mod b/go.mod
index df739978d1..0eb613b21b 100644
--- a/go.mod
+++ b/go.mod
@@ -17,6 +17,8 @@ require (
 	github.com/go-sql-driver/mysql v1.7.1
 	github.com/gorilla/handlers v1.5.1
 	github.com/gorilla/mux v1.8.0
+	github.com/gorilla/securecookie v1.1.2
+	github.com/gorilla/sessions v1.2.2
 	github.com/grpc-ecosystem/go-grpc-prometheus v1.2.0
 	github.com/kylelemons/godebug v1.1.0
 	github.com/lib/pq v1.10.9
diff --git a/go.sum b/go.sum
index c65da13191..f3976a4095 100644
--- a/go.sum
+++ b/go.sum
@@ -117,6 +117,7 @@ github.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/
 github.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=
 github.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
+github.com/google/gofuzz v1.2.0 h1:xRy4A+RhZaiKjJ1bPfwQ8sedCA+YS2YcCHW6ec7JMi0=
 github.com/google/s2a-go v0.1.4 h1:1kZ/sQM3srePvKs3tXAvQzo66XfcReoqFpIpIccE7Oc=
 github.com/google/s2a-go v0.1.4/go.mod h1:Ej+mSEMGRnqRzjc7VtF+jdBwYG5fuJfiZ8ELkjEwM0A=
 github.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
@@ -131,6 +132,10 @@ github.com/gorilla/handlers v1.5.1 h1:9lRY6j8DEeeBT10CvO9hGW0gmky0BprnvDI5vfhUHH
 github.com/gorilla/handlers v1.5.1/go.mod h1:t8XrUpc4KVXb7HGyJ4/cEnwQiaxrX/hz1Zv/4g96P1Q=
 github.com/gorilla/mux v1.8.0 h1:i40aqfkR1h2SlN9hojwV5ZA91wcXFOvkdNIeFDP5koI=
 github.com/gorilla/mux v1.8.0/go.mod h1:DVbg23sWSpFRCP0SfiEN6jmj59UnW/n46BH5rLB71So=
+github.com/gorilla/securecookie v1.1.2 h1:YCIWL56dvtr73r6715mJs5ZvhtnY73hBvEF8kXD8ePA=
+github.com/gorilla/securecookie v1.1.2/go.mod h1:NfCASbcHqRSY+3a8tlWJwsQap2VX5pwzwo4h3eOamfo=
+github.com/gorilla/sessions v1.2.2 h1:lqzMYz6bOfvn2WriPUjNByzeXIlVzURcPmgMczkmTjY=
+github.com/gorilla/sessions v1.2.2/go.mod h1:ePLdVu+jbEgHH+KWw8I1z2wqd0BAdAQh/8LRvBeoNcQ=
 github.com/grpc-ecosystem/go-grpc-prometheus v1.2.0 h1:Ovs26xHkKqVztRpIrF/92BcuyuQ/YW4NSIpoGtfXNho=
 github.com/grpc-ecosystem/go-grpc-prometheus v1.2.0/go.mod h1:8NvIoxWQoOIhqOTXgfV/d3M/q6VIi02HzZEHgUlZvzk=
 github.com/grpc-ecosystem/grpc-gateway v1.16.0/go.mod h1:BDjrQk3hbvj6Nolgz8mAMFbcEtjT1g+wF4CSlocrBnw=
diff --git a/server/handlers.go b/server/handlers.go
index 08004c6d0e..d4696ba8b7 100755
--- a/server/handlers.go
+++ b/server/handlers.go
@@ -18,6 +18,7 @@ import (
 
 	"github.com/coreos/go-oidc/v3/oidc"
 	"github.com/gorilla/mux"
+	"github.com/gorilla/sessions"
 	jose "gopkg.in/square/go-jose.v2"
 
 	"github.com/dexidp/dex/connector"
@@ -186,6 +187,52 @@ func (s *Server) handleAuthorization(w http.ResponseWriter, r *http.Request) {
 	}
 }
 
+func (s *Server) getSession(r *http.Request, authReq storage.AuthRequest) *sessions.Session {
+	session, _ := s.sessionStore.Get(r, authReq.ClientID)
+	return session
+}
+
+func (s *Server) getSessionIdentity(session *sessions.Session, authReq *storage.AuthRequest) (connector.Identity, bool) {
+	var identity connector.Identity
+	identityRaw, ok := session.Values["identity"].([]byte)
+	if !ok {
+		return identity, false
+	}
+	err := json.Unmarshal(identityRaw, &identity)
+	if err != nil {
+		return identity, false
+	}
+	return identity, true
+}
+
+func (s *Server) sessionGetScopes(session *sessions.Session) map[string]bool {
+	scopesRaw, ok := session.Values["scopes"].([]byte)
+	if ok {
+		var scopes map[string]bool
+		err := json.Unmarshal(scopesRaw, &scopes)
+		if err == nil {
+			return scopes
+		}
+	}
+	return make(map[string]bool)
+}
+
+func (s *Server) authenticateSession(w http.ResponseWriter, r *http.Request, authReq storage.AuthRequest) {
+	// add scopes of the request to session scopes after approval
+	session := s.getSession(r, authReq)
+	scopes := s.sessionGetScopes(session)
+	for _, wantedScope := range authReq.Scopes {
+		scopes[wantedScope] = true
+	}
+	var err error
+	session.Values["scopes"], err = json.Marshal(scopes)
+	if err != nil {
+		s.logger.Errorf("failed to marshal scopes: %v", err)
+	} else {
+		session.Save(r, w)
+	}
+}
+
 func (s *Server) handleConnectorLogin(w http.ResponseWriter, r *http.Request) {
 	authReq, err := s.parseAuthorizationRequest(r)
 	if err != nil {
@@ -262,15 +309,43 @@ func (s *Server) handleConnectorLogin(w http.ResponseWriter, r *http.Request) {
 			}
 			http.Redirect(w, r, callbackURL, http.StatusFound)
 		case connector.PasswordConnector:
-			loginURL := url.URL{
-				Path: s.absPath("/auth", connID, "login"),
-			}
-			q := loginURL.Query()
-			q.Set("state", authReq.ID)
-			q.Set("back", backLink)
-			loginURL.RawQuery = q.Encode()
+			session := s.getSession(r, *authReq)
+			identity, idFound := s.getSessionIdentity(session, authReq)
 
-			http.Redirect(w, r, loginURL.String(), http.StatusFound)
+			if !idFound {
+				// no session id, do password request
+				loginURL := url.URL{
+					Path: s.absPath("/auth", connID, "login"),
+				}
+				q := loginURL.Query()
+				q.Set("state", authReq.ID)
+				q.Set("back", backLink)
+				loginURL.RawQuery = q.Encode()
+
+				http.Redirect(w, r, loginURL.String(), http.StatusFound)
+			} else {
+				// session id found skip the password prompt
+				redirectURL, canSkipApproval, err := s.finalizeLogin(identity, *authReq, conn)
+				if err != nil {
+					s.logger.Errorf("Failed to finalize login: %v", err)
+					s.renderError(r, w, http.StatusInternalServerError, "Login error.")
+					return
+				}
+
+				if canSkipApproval {
+					authReq, err := s.storage.GetAuthRequest(authReq.ID)
+					if err != nil {
+						s.logger.Errorf("Failed to get updated request: %v", err)
+						s.renderError(r, w, http.StatusInternalServerError, "Login error.")
+						return
+					} else {
+						s.sendCodeResponse(w, r, authReq)
+						return
+					}
+				} else {
+					http.Redirect(w, r, redirectURL, http.StatusSeeOther)
+				}
+			}
 		case connector.SAMLConnector:
 			action, value, err := conn.POSTData(scopes, authReq.ID)
 			if err != nil {
@@ -390,6 +465,15 @@ func (s *Server) handlePasswordLogin(w http.ResponseWriter, r *http.Request) {
 			return
 		}
 
+		// store identity in session
+		session := s.getSession(r, authReq)
+		session.Values["identity"], err = json.Marshal(identity)
+		if err != nil {
+			s.logger.Errorf("failed to marshal identity: %v", err)
+		} else {
+			session.Save(r, w)
+		}
+
 		http.Redirect(w, r, redirectURL, http.StatusSeeOther)
 	default:
 		s.renderError(r, w, http.StatusBadRequest, "Unsupported request method.")
@@ -616,6 +700,7 @@ func (s *Server) handleApproval(w http.ResponseWriter, r *http.Request) {
 		// TODO: `finalizeLogin()` now sends code directly to client without going through this endpoint,
 		//		 the `if skipApproval { ... }` block needs to be removed after a grace period.
 		if s.skipApproval {
+			s.authenticateSession(w, r, authReq)
 			s.sendCodeResponse(w, r, authReq)
 			return
 		}
@@ -633,6 +718,7 @@ func (s *Server) handleApproval(w http.ResponseWriter, r *http.Request) {
 			s.renderError(r, w, http.StatusInternalServerError, "Approval rejected.")
 			return
 		}
+		s.authenticateSession(w, r, authReq)
 		s.sendCodeResponse(w, r, authReq)
 	}
 }
diff --git a/server/server.go b/server/server.go
index f23eb54b7c..c61046a8c9 100755
--- a/server/server.go
+++ b/server/server.go
@@ -45,6 +45,8 @@ import (
 	"github.com/dexidp/dex/pkg/log"
 	"github.com/dexidp/dex/storage"
 	"github.com/dexidp/dex/web"
+	"github.com/gorilla/securecookie"
+	"github.com/gorilla/sessions"
 )
 
 // LocalConnector is the local passwordDB connector which is an internal
@@ -156,7 +158,8 @@ type Server struct {
 
 	storage storage.Storage
 
-	mux http.Handler
+	mux          http.Handler
+	sessionStore *sessions.CookieStore
 
 	templates *templates
 
@@ -262,6 +265,28 @@ func newServer(ctx context.Context, c Config, rotationStrategy rotationStrategy)
 		now = time.Now
 	}
 
+	authKey := []byte(os.Getenv("DEX_SESSION_AUTHKEY"))
+	if len(authKey) == 0 {
+		authKey = securecookie.GenerateRandomKey(32)
+	}
+	encKey := []byte(os.Getenv("DEX_SESSION_ENCKEY"))
+	if len(encKey) == 0 {
+		encKey = securecookie.GenerateRandomKey(32)
+	}
+	sessionStore := sessions.NewCookieStore(authKey, encKey)
+	maxageEnv := os.Getenv("DEX_SESSION_MAXAGE_SECONDS")
+	if len(maxageEnv) > 0 {
+		maxage, err := strconv.Atoi(maxageEnv)
+		if err != nil {
+			return nil, fmt.Errorf("server: failed to load web static: %v", err)
+		}
+		sessionStore.MaxAge(maxage)
+	}
+	sessionStore.Options.HttpOnly = true
+	sessionStore.Options.Path = "/"
+	sessionStore.Options.Secure = true
+	sessionStore.Options.SameSite = http.SameSiteStrictMode
+
 	s := &Server{
 		issuerURL:              *issuerURL,
 		connectors:             make(map[string]Connector),
@@ -274,6 +299,7 @@ func newServer(ctx context.Context, c Config, rotationStrategy rotationStrategy)
 		refreshTokenPolicy:     c.RefreshTokenPolicy,
 		skipApproval:           c.SkipApprovalScreen,
 		alwaysShowLogin:        c.AlwaysShowLoginScreen,
+		sessionStore:           sessionStore,
 		now:                    now,
 		templates:              tmpls,
 		passwordConnector:      c.PasswordConnector,
